//数组转换成二叉搜索树
//就是每次选数组中间的数当根节点，再递归建立左子树和右子树


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        return nums == null ? null : sortToTree(nums, 0, nums.length - 1);          //如果根节点不为空，则递归建立二叉搜索树
    }
    public TreeNode sortToTree(int[] nums, int lo, int hi) {
    	if (lo > hi) {                                                                //如果左边界大于右边届，则返回null
    		return null;
    	}
    	int mid = (lo + hi) / 2;                                                      //找到二叉树的根节点，即数组中间的值
    	TreeNode root = new TreeNode(nums[mid]);
    	root.left = sortToTree(nums, lo, mid - 1);                                    //递归建立左子树
    	root.right = sortToTree(nums, mid + 1, hi);                                   //递归建立右子树
    	return root;                                                                  //返回根节点
    }   
}
