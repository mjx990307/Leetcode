//我感觉这个题的思路一开始对我有点复杂，递归也没有思路
//后来看了大佬的代码，才知道怎么写
//就是用递归，构造根节点，在构造左子树和右子树
//就是要找到中序左子树的范围和右子树的范围，以及后续左子树和右子树的范围
//后序中，最后一个结点是根节点， 中序根节点左侧是左子树范围，右侧是右子树范围
//找到后续序列中根节点，再跟中序序列匹配，则求出中序序列根节点左侧有几个结点，则后续中左子树的结点就有几个
//则可以求出左子树的范围和右子树的范围


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
		return postAndIn(0, postorder.length - 1, postorder, 0, inorder.length - 1, inorder);                //将根节点带入，此时范围是全部
	}
	public TreeNode postAndIn(int postleft, int postright, int[] post, int inleft, int inright, int[] in) {
		if (postleft > postright || inleft > inright) {                                     //如果左边大于右边，则是空结点，等号不可取，此时是叶节点
			return null;
		}
		TreeNode root = new TreeNode(post[postright]);                //创建根节点，根节点是后续序列中最后一个结点
		int rootin = inleft;                                          //从中序序列头部开始寻找后序遍历的根节点
		while (rootin <= inright && post[postright] != in[rootin]) rootin++;
		int leftlen = rootin - inleft;                                //算出根节点的左边有多少结点
		root.left = postAndIn(postleft, postleft + leftlen - 1, post, inleft, rootin - 1, in);      //遍历左子树，左子树中序序列为左边第一个结点，到
                                                                  //根节点前一个结点，左子树后序序列为左边第一个结点，到左子树结点个数个结点
		root.right = postAndIn(postleft + leftlen, postright - 1, post, rootin + 1, inright, in);   //遍历右子树，右子树中序序列为根节点右边第一个节点
                                                                  //到最后一个节点，右子树后续序列为左子树结点范围后一个结点到最后一个节点
		return root;
	}
}
