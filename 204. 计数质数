//厄拉多塞筛法
//这道题用到了一个很牛逼的算法，名字就是上面的那个
//思路就是从2开始，一次划掉4，6，8等二的倍数，再遍历3，依次划掉三的倍数
//并且一个技巧是，只用遍历到n的平方根的位置就行了，这样n的所有非质数都被划掉了


class Solution {
    public int countPrimes(int n) {
        if (n < 2) {
            return 0;
        }
    	int arr[] = new int[n];                                                             //创建数组，保存每个数是质数还是合数
    	arr[1] = 1;                                                                         //1不是质数，所以设为1
    	for (int i = 2; i <= Math.pow(n, 0.5); i++) {                                       //遍历从2到n的平方根的数
    		if (arr[i] == 0) {                                                                //如果是质数
    			for (int j = 2 * i; j < n; j = j + i) {                                         //把每一个该质数的倍数都设为合数
    				arr[j] = 1;
    			}
    		}
    	}
    	int sum = 0;                                                                        //sum设置为0
    	for (int i = 2; i < n; i++) {                                                       //遍历n以内的每一个数
    		if (arr[i] == 0) {                                                                //如果是质数，sum的值加一
    			sum++;
    		}
    	}
    	return sum;                                                                         //返回sum
    }
}
