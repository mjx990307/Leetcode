//被这道题坑了一次，本来想和求最大深度一样，直接递归
//然后遍历左子树和右子树的
//结果当左子树或右子树为空时，最小深度应该是有左子树或右子树的高度
//即空树的高度不应该算在内
//所以应该价格判断，判断左子树或右子树是否为空


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
    	if (root == null) {
    		return 0;
    	}
    	if ((root.right == null && root.left != null) || (root.right != null && root.left == null)) {
    		return root.right == null ? minDepth(root.left) + 1 : minDepth(root.right) + 1;                         //判断左子树和右子树是否为空
    	}
    	int left = minDepth(root.left);
    	int right = minDepth(root.right);
    	return Math.min(left, right) + 1;
    }
}
